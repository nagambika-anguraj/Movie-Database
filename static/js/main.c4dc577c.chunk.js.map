{"version":3,"sources":["container/Results.module.css","component/SearchBar.module.css","component/MoviePicture.module.css","assets/img/movie.png","App.module.css","component/SearchBar.js","component/Detail.js","component/MoviePicture.js","container/Results.js","App.js","serviceWorker.js","index.js","component/Detail.module.css"],"names":["module","exports","searchBar","props","className","classes","SearchBar","val","value","placeholder","onChange","e","searchValueChanged","onClick","searchButtonClicked","detail","Detail","details","title","src","poster","alt","Items","year","actors","writer","awards","plot","moviePicture","MoviePicture","picture","Results","state","movie","keyword","event","console","log","target","setState","i","axios","get","then","response","results","data","Search","map","Title","Year","Poster","id","imdbID","movies","catch","error","movieSelected","result","Actors","Awards","Plot","released","Released","Writer","movieResults","this","key","EachMovie","to","path","exact","Container","Result","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,OAAS,0B,mBCAlED,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,aAAe,qC,mBCDjCD,EAAOC,QAAU,IAA0B,mC,mBCC3CD,EAAOC,QAAU,CAAC,IAAM,mB,wOCUTC,EARG,SAACC,GAAD,OACd,yBAAKC,UAAWC,IAAQC,WACpB,gDACA,2BAAOC,IAAKJ,EAAMK,MAAOC,YAAY,wBAAwBC,SAAU,SAACC,GAAD,OAAMR,EAAMS,mBAAmBD,MACtG,4BAAQE,QAASV,EAAMW,qBAAvB,Q,gBCUOC,EAdA,SAACZ,GAAD,OACX,yBAAKC,UAAWC,IAAQW,QACpB,4BAAKb,EAAMc,QAAQC,OACnB,yBAAKC,IAAKhB,EAAMc,QAAQG,OAAQC,IAAKlB,EAAMc,QAAQC,QACnD,6BAAK,6BACL,yBAAKd,UAAWC,IAAQiB,OAAO,2CAAyBnB,EAAMc,QAAQM,MACtE,yBAAKnB,UAAWC,IAAQiB,OAAO,8CAA4BnB,EAAMc,QAAQO,QACzE,yBAAKpB,UAAWC,IAAQiB,OAAO,6CAA2BnB,EAAMc,QAAQQ,QACxE,yBAAKrB,UAAWC,IAAQiB,OAAO,6CAA2BnB,EAAMc,QAAQS,QACxE,6BAAK,6BACL,yBAAKtB,UAAWC,IAAQiB,OAAQnB,EAAMc,QAAQU,Q,kCCHvCC,EANM,kBACjB,yBAAKxB,UAAWC,IAAQwB,cACpB,yBAAKV,IAAKW,IAAST,IAAI,a,eCuHhBU,E,4MAnHZC,MAAM,CACFC,MAAO,GACPC,QAAS,UACTjB,QAAS,I,EAGZL,mBAAqB,SAACuB,GAClBC,QAAQC,IAAI,kBAAkBF,EAAMG,OAAO9B,OAC3C,EAAK+B,SAAS,CACVL,QAAQC,EAAMG,OAAO9B,S,EAI7BM,oBAAsB,WAClB,EAAKyB,SAAS,CACVN,MAAO,KAGX,IAAI,IAAIO,EAAE,EAAGA,EAAG,EAAGA,IACfC,IAAMC,IAAI,8CAAgD,EAAKV,MAAME,QAAU,SAAUM,GACxFG,MAAK,SAAAC,GACG,IAAKC,EAAUD,EAASE,KAAKC,OAAOC,KAAI,SAAAf,GACtC,MAAQ,CACJf,MAAOe,EAAMgB,MACb1B,KAAMU,EAAMiB,KACZ9B,OAAQa,EAAMkB,OACdC,GAAInB,EAAMoB,WAGVC,EAAM,sBACH,EAAKtB,MAAMC,OADR,YAEJY,IAENT,QAAQC,IAAIiB,GACZ,EAAKf,SAAS,CACbN,MAAOqB,OAGlBC,OAAM,SAAAC,GAAK,OAAIpB,QAAQC,IAAImB,O,EAIpCC,cAAgB,SAACL,GAEdhB,QAAQC,IAAIe,GACZX,IAAMC,IAAI,8CAA8CU,GACrDT,MAAK,SAAAC,GACF,IAAIc,EAAS,CACVxC,MAAO0B,EAASE,KAAKG,MACrB1B,KAAOqB,EAASE,KAAKI,KACrB9B,OAAQwB,EAASE,KAAKK,OACtBC,GAAIR,EAASE,KAAKO,OAClB7B,OAAOoB,EAASE,KAAKa,OACrBjC,OAAOkB,EAASE,KAAKc,OACrBjC,KAAKiB,EAASE,KAAKe,KACnBC,SAASlB,EAASE,KAAKiB,SACvBtC,OAAQmB,EAASE,KAAKkB,QAE9B5B,QAAQC,IAAIqB,GACZ,EAAKnB,SAAS,CACVtB,QAASyC,OAGXH,OAAM,SAAAC,GAAK,OAAGpB,QAAQC,IAAImB,O,uDAItB,IACFS,EADC,OAuBL,OAnBIA,EADoB,KAArBC,KAAKlC,MAAMC,MACU,6BACI,kBAACJ,EAAD,OAITqC,KAAKlC,MAAMC,MAAMe,KAAK,SAAAf,GACjC,OACI,wBAAIkC,IAAKlC,EAAMmB,IACX,yBAAKhD,UAAWC,IAAQ+D,WACxB,kBAAC,IAAD,CAAMC,GAAG,WACJ,yBAAKlD,IAAKc,EAAMb,OAAQC,IAAKY,EAAMf,MAAOL,QAAS,kBAAI,EAAK4C,cAAcxB,EAAMmB,QAErF,4BAAKnB,EAAMf,YAQvB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoD,KAAK,IAAIC,OAAK,GAEjB,yBAAKnE,UAAWC,IAAQmE,WACpB,kBAAClE,EAAD,CACIM,mBAAoB,SAACuB,GAAD,OAAS,EAAKvB,mBAAmBuB,IACrDrB,oBAAqBoD,KAAKpD,sBAE9B,wBAAIV,UAAWC,IAAQoE,QAClBR,KAIb,kBAAC,IAAD,CAAOK,KAAK,WACR,kBAACtD,EAAD,CAAQC,QAASiD,KAAKlC,MAAMf,gB,GA1G1ByD,a,iBCKPC,MATf,WACE,OACM,yBAAKvE,UAAWC,IAAQsE,KACrB,kBAAC,EAAD,QCISC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMmC,a,kBExI5B3F,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.c4dc577c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Results_Container__1xLSC\",\"Result\":\"Results_Result__22UCX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBar\":\"SearchBar_SearchBar__2Lcyo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoviePicture\":\"MoviePicture_MoviePicture__3Uga8\"};","module.exports = __webpack_public_path__ + \"static/media/movie.f362aeab.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2j0ie\"};","import React from 'react';\r\nimport classes from './SearchBar.module.css';\r\n\r\nconst searchBar = (props) => (\r\n    <div className={classes.SearchBar}>\r\n        <label>Search Here  </label>\r\n        <input val={props.value} placeholder=\" Enter any movie name\" onChange={(e) =>props.searchValueChanged(e)}></input>\r\n        <button onClick={props.searchButtonClicked}>Go</button>\r\n    </div>\r\n);\r\n\r\nexport default searchBar;","import React from 'react'\r\nimport classes from './Detail.module.css'\r\n\r\nconst detail = (props) => (\r\n    <div className={classes.Detail}>\r\n        <h2>{props.details.title}</h2>\r\n        <img src={props.details.poster} alt={props.details.title}></img>\r\n        <br/><br/>\r\n        <div className={classes.Items}><span>Year &nbsp;</span>{props.details.year}</div> \r\n        <div className={classes.Items}><span>Actors &nbsp; </span>{props.details.actors}</div> \r\n        <div className={classes.Items}><span>Writer &nbsp;</span>{props.details.writer}</div> \r\n        <div className={classes.Items}><span>Awards &nbsp;</span>{props.details.awards}</div> \r\n        <br/><br/>\r\n        <div className={classes.Items}>{props.details.plot}</div> \r\n    </div>\r\n)\r\n\r\nexport default detail;","import React from 'react';\r\nimport classes from './MoviePicture.module.css';\r\nimport picture from '../assets/img/movie.png';\r\n\r\nconst moviePicture = () => (\r\n    <div className={classes.MoviePicture}>\r\n        <img src={picture} alt=\"movies\" />\r\n    </div>\r\n)\r\n\r\nexport default moviePicture","import React, {Component} from 'react';\r\nimport axios from 'axios'\r\nimport classes from './Results.module.css'\r\nimport SearchBar from '../component/SearchBar'\r\nimport Detail from '../component/Detail'\r\nimport MoviePicture from '../component/MoviePicture'\r\nimport {Route, Link, Switch} from 'react-router-dom';\r\n//import react from '../assets/img/react.jpg'\r\n\r\nclass Results extends Component{\r\n   state={\r\n       movie: '',\r\n       keyword: 'america',\r\n       details: ''\r\n   }\r\n\r\n    searchValueChanged = (event) => {\r\n        console.log(\"Search Value : \"+event.target.value)\r\n        this.setState({\r\n            keyword:event.target.value\r\n        })\r\n    }\r\n\r\n    searchButtonClicked = () =>{\r\n        this.setState({\r\n            movie: ''\r\n        }) \r\n        \r\n        for(var i=1; i< 4; i++){\r\n            axios.get('https://www.omdbapi.com/?apikey=b9bd48a6&s=' + this.state.keyword + \"&page=\" +i)\r\n            .then(response => {\r\n                     var  results = response.data.Search.map(movie => {\r\n                       return  { \r\n                           title: movie.Title,\r\n                           year: movie.Year,\r\n                           poster: movie.Poster,\r\n                           id: movie.imdbID\r\n                       }\r\n                       })\r\n                       var movies = [\r\n                           ...this.state.movie,\r\n                          ...results\r\n                       ]\r\n                       console.log(movies)  \r\n                       this.setState({        \r\n                        movie: movies\r\n                    })              \r\n            })\r\n            .catch(error => console.log(error) )\r\n           }           \r\n    }\r\n\r\n    movieSelected = (id) => {\r\n       // alert(\"Selected Movie IMDB ID === \"+id)\r\n       console.log(id)\r\n       axios.get('https://www.omdbapi.com/?apikey=b9bd48a6&i='+id)\r\n         .then(response => {\r\n             var result = {\r\n                title: response.data.Title,\r\n                year:  response.data.Year,\r\n                poster: response.data.Poster,\r\n                id: response.data.imdbID,\r\n                actors:response.data.Actors,\r\n                awards:response.data.Awards,\r\n                plot:response.data.Plot,\r\n                released:response.data.Released,\r\n                writer: response.data.Writer\r\n             }\r\n        console.log(result)\r\n        this.setState({\r\n            details: result\r\n        })\r\n         })\r\n         .catch(error=> console.log(error))\r\n    }\r\n\r\n\r\n    render() {\r\n        let movieResults;\r\n\r\n        if(this.state.movie === ''){\r\n            movieResults =      <div> \r\n                                    <MoviePicture />\r\n                                </div>                             \r\n        }\r\n        else{\r\n            movieResults = this.state.movie.map( movie => {\r\n                return(\r\n                    <li key={movie.id}>  \r\n                        <div className={classes.EachMovie}>\r\n                        <Link to=\"/detail\">\r\n                             <img src={movie.poster} alt={movie.title} onClick={()=>this.movieSelected(movie.id)}/>\r\n                        </Link>  \r\n                        <h4>{movie.title}</h4>\r\n                        </div>                 \r\n                        \r\n                    </li>\r\n                )\r\n            })\r\n        }       \r\n        return(\r\n            <Switch>\r\n                <Route path=\"/\" exact>\r\n                {/* <img className={classes.Logo} src={react} alt=\"LOGO\" /> */}\r\n                    <div className={classes.Container}>\r\n                        <SearchBar \r\n                            searchValueChanged={(event)=>this.searchValueChanged(event)}\r\n                            searchButtonClicked={this.searchButtonClicked} />\r\n\r\n                        <ul className={classes.Result}>\r\n                            {movieResults}\r\n                        </ul>\r\n                    </div>    \r\n                </Route>\r\n                <Route path=\"/detail\">\r\n                    <Detail details={this.state.details}/>\r\n                </Route>\r\n            </Switch>\r\n\r\n                    \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Results","import React from 'react';\nimport Results from './container/Results'\nimport classes from './App.module.css';\n\n\nfunction App() {\n  return ( \n        <div className={classes.App}>\n           <Results/>\n        </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App/>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Detail\":\"Detail_Detail__L0v-Z\",\"Items\":\"Detail_Items__3scBX\"};"],"sourceRoot":""}